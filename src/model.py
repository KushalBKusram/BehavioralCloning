import os
import csv
import cv2
import math
import sklearn
import numpy as np

#Read data from driving log generated by simulator
lines = []
with open('data/driving_log.csv') as csvfile:
    reader = csv.reader(csvfile)
    for line in reader:
        lines.append(line)
        
lines = lines[1:]

from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
train_samples, validation_samples = train_test_split(lines, test_size=0.2)

#Data generator if training data does not fit in the memory
def generator(samples, batch_size=32):
    num_samples = len(samples)
    while 1:
        shuffle(samples)
        for offset in range(0, num_samples, batch_size):
            batch_samples = samples[offset: offset+batch_size]
            
            images=[]
            angles=[]
            
            for batch_sample in batch_samples:
                source_path = batch_sample[0]
                filename = source_path.split('/')[-1]
                left = batch_sample[1].split('/')[-1]
                right = batch_sample[2].split('/')[-1]
                current_path = 'data/IMG/' + filename
                left_path = 'data/IMG/' + left
                right_path = 'data/IMG/' + right                                   
                center_image = cv2.imread(current_path)
                left_image = cv2.imread(left_path)
                right_image = cv2.imread(right_path)                                             
                center_angle = float(batch_sample[3])
                correction = 0.2
                left_angle = center_angle + correction
                right_angle = center_angle - correction
                images.append(center_image)
                angles.append(center_angle)
                images.append(cv2.flip(center_image, 1))
                angles.append(center_angle*-1.0)
                images.append(left_image)
                angles.append(left_angle)
                images.append(right_image)
                angles.append(right_angle)
                
            XTrain = np.array(images)
            yTrain = np.array(angles)
            yield sklearn.utils.shuffle(XTrain, yTrain)

batch_size = 32
train_generator = generator(train_samples, batch_size=batch_size)
validation_generator = generator(validation_samples, batch_size=batch_size)

from keras.models import Sequential, Model
from keras.layers import Flatten, Dense, Lambda, Dropout, Activation, Cropping2D
from keras.layers.convolutional import Convolution2D
from keras.utils import plot_model

#Design a neural network to learn my driving skills
model = Sequential()
model.add(Lambda(lambda x: (x/255.0) - 0.5, input_shape=(160, 320, 3)))
model.add(Cropping2D(cropping=((70,25), (0,0))))
model.add(Convolution2D(24, 5, 5, border_mode='valid', subsample=(2, 2), activation='relu'))
model.add(Convolution2D(36, 5, 5, border_mode='valid', subsample=(2, 2), activation='relu'))
model.add(Convolution2D(48, 5, 5, border_mode='valid', subsample=(2, 2), activation='relu'))
model.add(Convolution2D(64, 3, 3, border_mode='valid', activation='relu'))
model.add(Convolution2D(64, 3, 3, border_mode='valid', activation='relu'))
model.add(Flatten())
model.add(Dense(100))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(50))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(10))
model.add(Activation('relu'))
model.add(Dense(1))

model.compile(loss='mse', optimizer='adam')
#model.fit(X_train, y_train, validation_split=0.2, shuffle=True, nb_epoch=10)
model.fit_generator(train_generator, steps_per_epoch=math.ceil(len(train_samples)*3/batch_size), validation_data=validation_generator, validation_steps=math.ceil(len(validation_samples)/batch_size), epochs=1, verbose=1)
#Save the model visualization and weights.
model.save('model.h5')
plot_model(model, to_file='model.png')


    
    